str1 = "foo"
str2 = str1
str3 = "f" + "o" + "o"
p str1.equal?(str2) # => true
p str1.equal?(str3) # => false

# Rubyのequal?メソッドは、2つのオブジェクトが同一のオブジェクトであるかどうかをチェックします。つまり、それらがメモリ上の同じ場所を指しているかどうかを確認します。equal?メソッドは、以下のような場合にtrueを返します。

# ==メソッドとequal?メソッドの違い
aqa1 = "foo"
aqa2 = "f" + "o" + "o"
p aqa1 == aqa2 # => true #中の文字列が同じなのでtrue equal?メゾットだとfalseになる

# eql?メゾット
p 1.0 == 1 # => true
p 1.0.eql?(1) # => false #数字の時は==と違う動きをする

#　ハッシュ内部ではeql?メゾットが使われるから
hash = {0=>"zero"}
p hash[0.0] # => nil
p hash[0] # => "zero"

=begin

Rubyでは、ハッシュを定義する際に:（コロン）を使用することができますが、それはシンボルをキーとするハッシュに限定されます。シンボルは:に続く名前で表され、一意のオブジェクトを表します。

以下に、シンボルをキーとするハッシュの例を示します。

しかし、あなたのコードでは、キーとして整数0を使用しています。整数や文字列など、シンボル以外のキーを使用する場合は、=>（ロケット演算子）を使用してキーと値を関連付ける必要があります。

したがって、あなたのコードは以下のようになります。

このコードでは、ハッシュhashのキー0に対する値として"zero"が設定されています。

=end
